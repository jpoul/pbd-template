#!/bin/bash

# Pre-commit hook to enforce TDD principles
echo "üìã Running pre-commit checks for TDD workflow..."

# Check if this is a merge commit or rebase
if git rev-parse -q --verify MERGE_HEAD || [[ -f .git/MERGE_HEAD ]]; then
    echo "‚è© Merge commit detected, skipping tests"
    exit 0
fi

# Check if Jest configuration exists
if [[ -f "jest.config.js" ]] || [[ -f "jest.config.ts" ]] || grep -q '"jest"' package.json || grep -q "'jest'" package.json; then
    # Jest configuration found, proceed with tests
    echo "üîç Jest configuration detected, proceeding with tests..."
    
    # Stash unstaged changes
    git stash -q --keep-index

    # Run tests
    echo "üß™ Running tests..."
    npm test
    TEST_STATUS=$?

    # Check test coverage
    if [ $TEST_STATUS -eq 0 ]; then
        echo "üìä Checking test coverage..."
        npm run test:coverage
        COVERAGE_STATUS=$?
    else
        COVERAGE_STATUS=1
    fi

    # Restore unstaged changes
    git stash pop -q

    # If tests failed, prevent commit
    if [ $TEST_STATUS -ne 0 ]; then
        echo "‚ùå Tests failed! Commit aborted."
        echo "üîç Please fix the failing tests before committing."
        exit 1
    fi

    # If coverage is below threshold, prevent commit
    if [ $COVERAGE_STATUS -ne 0 ]; then
        echo "‚ùå Test coverage below threshold! Commit aborted."
        echo "üîç Please ensure sufficient test coverage before committing."
        exit 1
    fi

    # Check if TDD pattern is followed (test files modified before implementation)
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.tsx?$')
    for FILE in $STAGED_FILES; do
        # If it's an implementation file, check if corresponding test exists and was modified
        if [[ ! $FILE =~ \.test\.|\.spec\. ]]; then
            TEST_FILE=${FILE/.ts/.test.ts}
            TEST_FILE=${TEST_FILE/.tsx/.test.tsx}
            
            # If test file exists but wasn't modified in this commit
            if [ -f "$TEST_FILE" ] && ! git diff --cached --name-only | grep -q "$TEST_FILE"; then
                echo "‚ö†Ô∏è Warning: Modifying $FILE without updating its tests may break TDD principles."
            fi
        fi
    done

    echo "‚úÖ All TDD checks passed! Proceeding with commit."
else
    echo "‚è© No Jest configuration detected, skipping tests"
fi

# Get the commit message from the COMMIT_EDITMSG file
# This is where Git stores the commit message during pre-commit
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"

if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
    echo "üìù Detected commit message: $COMMIT_MSG"

    # Check if the commit message contains a task reference
    if [[ $COMMIT_MSG =~ \[([A-Za-z]+-[0-9]+\.[0-9]+\.[0-9]+)\] ]]; then
        echo "üìù Task reference detected in commit message. Running todo update script..."
        "$(dirname "$0")/../update-todo.sh" "$COMMIT_MSG"
        UPDATE_STATUS=$?
        
        if [ $UPDATE_STATUS -eq 0 ]; then
            echo "‚úÖ Todo update completed successfully."
        else
            echo "‚ö†Ô∏è Todo update encountered an issue (exit code: $UPDATE_STATUS)."
        fi
    else
        echo "‚ÑπÔ∏è No task reference found in commit message. Todo.md not updated."
    fi
else
    echo "‚ÑπÔ∏è No commit message file found. Todo.md not updated."
fi

exit 0