#!/bin/bash

# Commit message hook to enforce task reference format
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Define expected format pattern
# Format: [PROJECT-X.Y.Z] Commit message
PATTERN='^\[\w+-[0-9]+\.[0-9]+\.[0-9]+\] .+$'

# Skip validation for merge commits
if [[ $COMMIT_MSG =~ ^Merge ]]; then
  exit 0
fi

# Validate the commit message
if ! [[ $COMMIT_MSG =~ $PATTERN ]]; then
  echo "❌ Invalid commit message format!"
  echo ""
  echo "Commit message should match the format: [PROJECT-X.Y.Z] Brief description"
  echo ""
  echo "Where:"
  echo "  - PROJECT is your project identifier"
  echo "  - X.Y.Z is the task number from todo.md"
  echo "  - Brief description explains what the commit does"
  echo ""
  echo "Example: [ZENO-1.2.3] Implement user authentication"
  echo ""
  echo "Your commit message was:"
  echo "$COMMIT_MSG"
  echo ""
  exit 1
fi

# Check for minimum description length (after the task reference)
DESCRIPTION=$(echo "$COMMIT_MSG" | sed -E 's/^\[\w+-[0-9]+\.[0-9]+\.[0-9]+\] //')
if [ ${#DESCRIPTION} -lt 10 ]; then
  echo "❌ Commit message description is too short!"
  echo "Please provide a more descriptive message after the task reference."
  exit 1
fi

# Extract task ID for validation
TASK_ID=$(echo "$COMMIT_MSG" | grep -oE '^\[\w+-[0-9]+\.[0-9]+\.[0-9]+\]' | tr -d '[]')

# Optional: Verify task exists in todo.md
# Commented out as it may be too strict for all projects
# if ! grep -q "$TASK_ID" todo.md; then
#   echo "⚠️ Warning: Task ID '$TASK_ID' not found in todo.md"
#   echo "Make sure you're referencing a valid task."
# fi

echo "✅ Commit message format is valid!"
exit 0